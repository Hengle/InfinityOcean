#pragma once

#include "/Engine/Private/Common.ush"

float4 SizeScale;
Texture2D VectorTexture; 
SamplerState VectorTextureSampler;
RWTexture2D<float4> Output_UAV_NormalFomeTexture;

[numthreads(16, 16, 1)] 
void ComputeNormalFoading(uint3 ThreadId : SV_DispatchThreadID) 
{
	float2 UV = (ThreadId.xy + 0.5) * SizeScale.zw;

	float3 Center = VectorTexture.SampleLevel(VectorTextureSampler, UV, 0).xyz;
	float3 Left = VectorTexture.SampleLevel(VectorTextureSampler, UV + (int2(-1, 0) / SizeScale.xy), 0).xyz;
	float3 Right = VectorTexture.SampleLevel(VectorTextureSampler, UV + (int2(1, 0) / SizeScale.xy), 0).xyz;
	float3 Top = VectorTexture.SampleLevel(VectorTextureSampler, UV + (int2(0, -1) / SizeScale.xy), 0).xyz;
	float3 Bottom = VectorTexture.SampleLevel(VectorTextureSampler, UV + (int2(0, 1) / SizeScale.xy), 0).xyz;

	float3 Dx = (Left.xyz - Right.xyz);
	float3 Dy = (Top.xyz - Bottom.xyz);
	float J = (1 + Dx.x) * (1 + Dy.y) - Dx.y * Dy.x;

	float Floding = max(1 -J, 0); 
	float3 Gradient = normalize(float3(Dx.z, 0.1, Dy.z) );
	Gradient = float3(-Gradient.x, -Gradient.z, Gradient.y);

	Output_UAV_NormalFomeTexture[ThreadId.xy] = float4(Gradient, Floding);
}